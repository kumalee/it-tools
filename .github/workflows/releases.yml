name: Release new versions

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  docker-release:
    runs-on: ubuntu-latest
    steps:
      - name: Get release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            corentinth/it-tools:latest
            corentinth/it-tools:${{ env.RELEASE_VERSION }}
            ghcr.io/corentinth/it-tools:latest
            ghcr.io/corentinth/it-tools:${{ env.RELEASE_VERSION}}

  github-release:
    runs-on: ubuntu-latest
    needs: docker-release
    steps:
      - name: Get release version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@3df4ab11eba7bda6032a0b82a6bb43b11571feac # v4

      - run: corepack enable

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm i

      - name: Build the app
        run: pnpm build

      - name: Zip the app
        run: zip -r it-tools-${{ env.RELEASE_VERSION }}.zip dist/*

      - name: Get changelog
        id: changelog
        run: |
          EOF=$(openssl rand -hex 8)
          echo "changelog<<$EOF" >> $GITHUB_OUTPUT
          node ./scripts/getLatestChangelog.mjs >> $GITHUB_OUTPUT
          echo "$EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: it-tools-${{ env.RELEASE_VERSION }}.zip
          tag_name: v${{ env.RELEASE_VERSION }}
          draft: true
          prerelease: false
          body: |
            ## Docker images

            - Docker Hub
              - `corentinth/it-tools:latest`
              - `corentinth/it-tools:${{ env.RELEASE_VERSION }}`
            - GitHub Container Registry
              - `ghcr.io/corentinth/it-tools:latest`
              - `ghcr.io/corentinth/it-tools:${{ env.RELEASE_VERSION}}`

            ## Changelog

            ${{ steps.changelog.outputs.changelog }}

  app-release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: aarch64-apple-darwin
            bundles: dmg
            os: darwin
            arch: aarch64
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            bundles: msi
            os: windows
            arch: x86_64
          # - host: windows-latest
          #   target: aarch64-pc-windows-msvc
          - host: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bundles: deb,appimage
            os: linux
            arch: x86_64
          # - host: ubuntu-20.04
          #   target: x86_64-unknown-linux-musl
          # - host: ubuntu-20.04
          #   target: aarch64-unknown-linux-gnu
          #   bundles: deb # no appimage for now unfortunetly
          #   os: linux
          #   arch: aarch64
          # - host: ubuntu-20.04
          #   target: aarch64-unknown-linux-musl
    name: Desktop - Main ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: ${{ runner.os == 'linux' }}
        # You can remove libayatana-appindicator3-dev if you don't use the system tray feature.
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Aarch64 setting
        if: ${{ runner.os == 'macOS' }}
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.x.x

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'pnpm'
    
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build the app
        if: ${{ runner.os != 'macOS' }}
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          releaseName: 'It-Tools v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: false

      - name: Build the app
        if: ${{ runner.os == 'macOS' }}
        uses: tauri-apps/tauri-action@v0

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }} # This only works if your workflow triggers on new tags.
          releaseName: 'It-Tools v__VERSION__' # tauri-action replaces \_\_VERSION\_\_ with the app version.
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: false
          args: --target universal-apple-darwin
